<!DOCTYPE html>

<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Arabic Dialect Demo</title>
  <style type='text/css'>
    ul { list-style: none; }
    #recordingslist audio { display: block; margin-bottom: 10px; }
  </style>
  <script src="{{request.static_url('scaffold:static/jquery-3.2.0.min.js') }}"></script>
</head>
<body>

  <h1>Arabic Dialect Demo</h1>

  <p>To upload your recording and get predictations following steps below:</p>
  <p>Step1: press "record" button to record your voice.</p>
  <p>Step2: press "stop" button to complete the recording.</p>
  </br>

  <button onclick="startRecording(this);">record</button>
  <button onclick="stopRecording(this);" disabled>stop</button>

  <h2>Recordings</h2>
  <ul id="recordingslist"></ul>

  <h2>Log</h2>
  <pre id="log"></pre>

  <script>
  function __log(e, data) {
    log.innerHTML += "\n" + e + " " + (data || '');
  }

  var audio_context;
  var recorder;

  function startUserMedia(stream) {
    var input = audio_context.createMediaStreamSource(stream);
    __log('Media stream created.');

    // Uncomment if you want the audio to feedback directly
    input.connect(audio_context.destination);
    __log('Input connected to audio context destination.');

    recorder = new Recorder(input);
    __log('Recorder initialised.\n');
  }

  function startRecording(button) {
    recorder && recorder.record();
    button.disabled = true;
    button.nextElementSibling.disabled = false;
    __log('\nRecording...');
  }

  function stopRecording(button) {
    recorder && recorder.stop();
    button.disabled = true;
    button.previousElementSibling.disabled = false;
    __log('Stopped recording.\n');

    // create WAV download link using audio data blob

    //recorder.getBuffer();
    createComponents();
    //createSubmitButton();
    recorder.clear();
  }



  function createComponents() {
    recorder && recorder.exportWAV(function(blob) {
      var url = URL.createObjectURL(blob);
      var li = document.createElement('li');
      var au = document.createElement('audio');
      var hf = document.createElement('a');

      var button = document.createElement("button");
      button.innerHTML = "submit";

      button.addEventListener ("click", function() {
        var fd = new FormData();
        fname = new Date().toISOString() + '.wav';
	    fd.append('fname', fname);
	    recorder.exportWAV(function(blob) {
            fd.append('data', blob);
            $.ajax({
                type: 'POST',
                url: '/store_mp3_view',
                data: fd,
                processData: false,
                contentType: false,
                success: function(res) {
                    __log(res);
                },
                error: function() {
                    console.log('Error occured');
                }
            }).done(function(data) {
                   //console.log("done");
            });
        });

      });
      au.controls = true;
      au.src = url;
      hf.href = url;
      hf.download = "	" + new Date().toISOString() + '.wav';
      hf.innerHTML = hf.download;
      li.appendChild(au);
      li.appendChild(button);
      li.appendChild(hf);

      recordingslist.appendChild(li);
    });
  }

  window.onload = function init() {
    try {
      // webkit shim
      window.AudioContext = window.AudioContext || window.webkitAudioContext;
      navigator.getUserMedia = navigator.mediaDevices.getUserMedia || navigator.webkitGetUserMedia;
      window.URL = window.URL || window.webkitURL;

      audio_context = new AudioContext;
      __log('Audio context set up.');
      __log('navigator.mediaDevices.getUserMedia ' + (navigator.mediaDevices.getUserMedia ? 'available.' : 'not present!'));
    } catch (e) {
      alert('No web audio support in this browser!');
    }

    navigator.mediaDevices.getUserMedia({audio: true}).then(startUserMedia).catch(function(err){
        __log('No live audio input: ' + err + ' ,  code:' + err.code);
    });
  };
  </script>
  <script src="{{request.static_url('scaffold:static/recorder.js') }}"></script>
</body>
</html>